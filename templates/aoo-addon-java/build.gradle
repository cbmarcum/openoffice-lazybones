/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    /*
    The plugin builds a distribution for your library. The distribution will
    package up the runtime dependencies of the library. All files stored in
    src/main/dist will be added to the root of the archive distribution.
    You can run “gradle distZip” to create a ZIP file containing the distribution.
     */
    id 'java-library-distribution'

}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    // implementation 'org.codehaus.groovy:groovy-all:3.0.7'
    compileOnly 'org.codehaus.groovy:groovy-all:3.0.7'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1-jre'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // not put on runtimeClasspath since the're available to the office already
    // this way the're not added to the jar classPath or put in lib and packaged in oxt
    compileOnly "net.codebuilders:juh:4.1.6" // not needed according to dev guide
    compileOnly "net.codebuilders:ridl:4.1.6"
    compileOnly "net.codebuilders:unoil:4.1.6"
    compileOnly "net.codebuilders:jurt:4.1.6"
}

ant.importBuild 'ant/build.xml'

version = '0.1.0'


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// exclude the XML and IDL files from compilation
sourceSets {
    main {
        groovy {
            exclude "**/*.xml"
            exclude "**/*.idl"
        }
    }
}


// include the IDL types jar in the OXT
/*
distributions {
    main {
        contents {
            from "build/libs/TestAddIn_IDL_types.jar"
            from "build/idl/rdb/types.rdb"
        }
    }
}
*/

/*
Manifest-Version: 1.0
Ant-Version: Apache Ant 1.10.4
Created-By: 11.0.8+10-LTS (Amazon.com Inc.)
UNO-Type-Path:
RegistrationClassName: com.example.CentralRegistrationClass
Class-Path:

Name: com/example/CentralRegistrationClass.class
RegistrationClasses: com.example.GroovyAddOn

*/

jar {
    archiveFileName = "GroovyAddOn.jar"
    manifest {
        attributes('UNO-Type-Path': '',
                'RegistrationClassName': 'com.example.CentralRegistrationClass',
                'Class-Path': configurations.runtimeClasspath.collect { "lib/" + it.getName() }.join(' '))
        // we need this for new section named com/example/CentralRegistrationClass.class
        attributes('RegistrationClasses': 'com.example.GroovyAddOn', 'com/example/CentralRegistrationClass.class')
    }
}

tasks.named('compileGroovy') {
    // add IDL type classes to the classpath
    classpath += files("build/classes")
}

// fix for extra top dir in OXT
distributions {
    main {
        // distributionBaseName = 'openoffice-groovy'
        contents {
            from {
                "$buildDir/distribution-files/application"
            }
            into '/'
            // filesMatching("**/*.xml") {
            //     expand(project.properties)
            // }
        }
    }
}

distZip {
    // archiveBaseName = 'openoffice-groovy'
    archiveExtension = 'oxt'
    entryCompression = ZipEntryCompression.STORED
}

compileGroovy.dependsOn("jar-idl-types")
// jar.dependsOn("jar-idl-types")

// standard
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
